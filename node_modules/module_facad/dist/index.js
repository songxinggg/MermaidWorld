'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

exports.EmFacadPart = void 0;
(function (EmFacadPart) {
    EmFacadPart[EmFacadPart["Body"] = -1] = "Body";
    /**上衣 */
    EmFacadPart[EmFacadPart["BodyUpper"] = 0] = "BodyUpper";
    /**下衣 */
    EmFacadPart[EmFacadPart["BodyLower"] = 1] = "BodyLower";
    /**前发 */
    EmFacadPart[EmFacadPart["HairFront"] = 2] = "HairFront";
    /**后发 */
    EmFacadPart[EmFacadPart["HairBack"] = 3] = "HairBack";
    /**脸，头 */
    EmFacadPart[EmFacadPart["Head"] = 4] = "Head";
    /**手套 */
    EmFacadPart[EmFacadPart["Gloves"] = 5] = "Gloves";
    /**鞋子 */
    EmFacadPart[EmFacadPart["Shoe"] = 6] = "Shoe";
    EmFacadPart[EmFacadPart["PartStart"] = 7] = "PartStart";
})(exports.EmFacadPart || (exports.EmFacadPart = {}));
// export class FacadInfo extends DataInfo {
// 	//当前装备的挂件
// 	equipFacads: { [key: number]: number };
// 	//所有拥有的
// 	allSuits: { [key: number]: number };
// }
class CountMap extends Map {
    addCount(key, num) {
        let val = this.get(key) || 0;
        val += num;
        this.set(key, val);
    }
    hasCount(key) {
        let val = this.get(key) || 0;
        return val > 0;
    }
    decCount(key, num) {
        let val = this.get(key) || 0;
        if (val && val > 0) {
            val -= num;
            this.set(key, val);
        }
    }
}
class FacadModuleDataBase extends Subdata {
    equipFacads;
    //所有拥有的
    allSuits;
    //serveronly
    facadScript;
    usedMap = new CountMap();
    // constructor() {
    // 	super(FacadInfo);
    // }
    initDefaultData() {
        console.error("initDefaultData");
        this.equipFacads = {};
        this.allSuits = {};
    }
    get dataName() {
        return "FacadInfo";
    }
    clone(data) {
        this["dataInfoMap"] = {};
        // this["dataInfoMap"][FacadInfo.name] = new FacadInfo();
        // this["_dataInfo"] = this["dataInfoMap"][FacadInfo.name];
        this.equipFacads = this.cloneObj(data.equipFacads);
        this.allSuits = this.cloneObj(data.allSuits);
        this.usedMap.clear();
        for (let id in this.equipFacads) {
            this.usedMap.addCount(this.equipFacads[id], 1);
        }
    }
    cloneObj(source) {
        let ret = {};
        for (let id in source) {
            ret[id] = source[id];
        }
        return ret;
    }
    getEquipedFacadsArray() {
        let ret = [];
        for (let id in this.equipFacads) {
            ret.push({ type: Number(id), cfgId: this.equipFacads[id] });
        }
        return ret;
    }
    getEquipedFacadsStr() {
        let ret = [];
        for (let id in this.equipFacads) {
            ret.push(`${id}_${this.equipFacads[id]}`);
        }
        return ret.join("|");
    }
    onDataInit() {
        super.onDataInit();
        for (let id in this.equipFacads) {
            this.usedMap.addCount(this.equipFacads[id], 1);
        }
    }
    /**
     * 获取某个部位的挂件信息
     * @param facadType 挂件部位
     * @returns 找到的道具
    */
    getEquipedFacadByType(facadType) {
        return this.equipFacads[facadType];
    }
    /**
     * 设置某个部位的挂件信息
     * @param facadType 挂件枚举
     * @param facad 挂件信息
     */
    setEquipedFacad(facadType, facadCfgId) {
        let old = this.equipFacads[facadType];
        if (old) {
            if (old == facadCfgId) {
                return;
            }
            this.usedMap.decCount(old, 1);
        }
        if (facadCfgId != 0) {
            this.equipFacads[facadType] = facadCfgId;
            this.usedMap.addCount(facadCfgId, 1);
        }
        else {
            delete this.equipFacads[facadType];
            this.usedMap.delete(facadType);
        }
    }
    addSuit(cfgId) {
        this.allSuits[cfgId] = 1;
    }
    hasSuit(cfgId) {
        return this.allSuits[cfgId] == 1;
    }
    isSuitCfgInUse(cfgId) {
        return this.usedMap.hasCount(cfgId);
    }
    forEachAllSuit(call) {
        for (let id in this.allSuits) {
            call(Number(id));
        }
    }
}
__decorate([
    Decorator.persistence()
], FacadModuleDataBase.prototype, "equipFacads", void 0);
__decorate([
    Decorator.persistence()
    //所有拥有的
], FacadModuleDataBase.prototype, "allSuits", void 0);

exports.Enums = void 0;
(function (Enums) {
    (function (TouchEvent) {
        TouchEvent[TouchEvent["DOWN"] = 0] = "DOWN";
        TouchEvent[TouchEvent["MOVE"] = 1] = "MOVE";
        TouchEvent[TouchEvent["UP"] = 2] = "UP";
    })(Enums.TouchEvent || (Enums.TouchEvent = {}));
})(exports.Enums || (exports.Enums = {}));
class TouchScript {
    constructor() {
        this.captureMap = new Map();
        this.screenListeners = [];
    }
    onStart() {
    }
    static _ins;
    static get instance() {
        if (this._ins == null) {
            this._ins = new TouchScript();
        }
        return this._ins;
    }
    ///========================================================
    /**屏幕事件 */
    screenListeners;
    captureMap;
    addScreenListener(widget, callback, adjuestCenter) {
        this.screenListeners.push({ widget: widget, callback: callback, adjuestCenter: adjuestCenter });
    }
    removeScreenListener(widget) {
        for (let i = 0; i < this.screenListeners.length; i++) {
            if (this.screenListeners[i].widget == widget) {
                this.screenListeners.splice(i, 1);
                i--;
            }
        }
    }
    onTouchStarted(inGemory, inPointerEvent) {
        for (let i = 0; i < this.screenListeners.length; i++) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            const pos = new mw.Vector2(this.screenListeners[i].widget.position.x, this.screenListeners[i].widget.position.y);
            const size = this.screenListeners[i].widget.size;
            if (localPosition.x > pos.x && localPosition.y > pos.y && localPosition.x < (pos.x + size.x) && localPosition.y < (pos.y + size.y)) {
                this.captureMap.set(inPointerEvent.pointerIndex, this.screenListeners[i]);
                this.screenListeners[i].callback(this.screenListeners[i].widget, exports.Enums.TouchEvent.DOWN, localPosition.x, localPosition.y, inPointerEvent);
                return mw.EventReply.handled;
            }
        }
        return mw.EventReply.handled;
    }
    onTouchMoved(inGemory, inPointerEvent) {
        if (this.captureMap.has(inPointerEvent.pointerIndex)) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            let capture = this.captureMap.get(inPointerEvent.pointerIndex);
            const pos = new mw.Vector2(capture.widget.position.x, capture.widget.position.y);
            const size = capture.widget.size;
            if (localPosition.x > pos.x && localPosition.y > pos.y && localPosition.x < (pos.x + size.x) && localPosition.y < (pos.y + size.y)) {
                capture.callback(capture.widget, exports.Enums.TouchEvent.MOVE, localPosition.x, localPosition.y, inPointerEvent);
            }
        }
        return mw.EventReply.handled;
    }
    onTouchEnded(inGemory, inPointerEvent) {
        if (this.captureMap.has(inPointerEvent.pointerIndex)) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            let capture = this.captureMap.get(inPointerEvent.pointerIndex);
            capture.callback(capture.widget, exports.Enums.TouchEvent.UP, localPosition.x, localPosition.y, inPointerEvent);
            this.captureMap.delete(inPointerEvent.pointerIndex);
        }
        return mw.EventReply.handled;
    }
}

/*
 * @Autor: Dejia
 * @Date: 2022-07-05 16:38:07
 * @LastEditors: Dejia
 * @LastEditTime: 2022-07-05 16:38:07
 */
/*
 * @Author: yfl
 * @Date: 2022-03-10 11:35:59
 * @LastEditTime: 2022-03-10 13:43:36
 * @FilePath: \JavaScripts\common\Queue.ts
 */
class Queue {
    elemrnts;
    _size;
    constructor(capacity) {
        this.elemrnts = new Array();
        this._size = capacity;
    }
    push(o) {
        if (o == null) {
            return false;
        }
        if (this._size != undefined && !isNaN(this._size)) {
            if (this.elemrnts.length == this._size) {
                this.pop();
            }
        }
        this.elemrnts.unshift(o);
        return true;
    }
    pop() {
        return this.elemrnts.pop();
    }
    size() {
        return this.elemrnts.length;
    }
    isempty() {
        return this.size() == 0;
    }
    clear() {
        delete this.elemrnts;
        this.elemrnts = new Array();
    }
    show(num) {
        if (num >= 0 && num < this.size()) {
            return this.elemrnts[this.size() - 1 - num];
        }
        else {
            return;
        }
    }
    showsize() {
        return this._size;
    }
    getAll() {
        return this.elemrnts;
    }
}

class UIMultiScroller {
    _index = -1;
    _dataCount;
    _sBox;
    _scrollRoot;
    _movement;
    _itemArr = [];
    // 将未显示出来的Item存入未使用队列里面，等待需要使用的时候直接取出
    _unUsedQueue;
    _maxPerLine = 3;
    // 距离左侧和上册的起始距离
    _leftSpace = 30;
    _topSpace = 30;
    // Item的宽高
    _cellWidth = 500;
    _cellHeight = 100;
    // 行间距X
    _spacingX = 40;
    // 行间距Y
    _spacingY = 20;
    //默认加载行数，一般比可显示行数大2~3行
    _viewLine = 6;
    _itemPrefab;
    _dataArray;
    /**
    * 循环列表构造函数
    * @param sbox       ScrollBox对象ui的引用
    * @param sr         ScrollBox下的节点的引用
    * @param prefab     ScrollBoxItem预制体
    * @param maxPerLine 每行显示的数量
    * @param leftSpace  左边界间距
    * @param topSpace   上边界间距
    * @param cellWidth  ScrollBox下子节点的宽
    * @param cellHeight ScrollBox下子节点的高
    * @param viewCount  ScrollBox的默认加载行数
    * @param spacingX   ScrollBox的行间距X
    * @param spacingY   ScrollBox的行间距Y
    */
    constructor(sbox, sr, preafab, maxPerLine, leftSpace = 30, topSpace = 30, cellWidth = 150, cellHeight = 150, viewCount = 5, spacingX = 40, spacingY = 20) {
        this._sBox = sbox;
        this._scrollRoot = sr;
        this._itemPrefab = preafab;
        this._leftSpace = leftSpace;
        this._topSpace = topSpace;
        this._movement = sbox.orientation;
        this._cellWidth = cellWidth;
        this._cellHeight = cellHeight;
        this._viewLine = viewCount;
        this._spacingX = spacingX;
        this._spacingY = spacingY;
        this._maxPerLine = maxPerLine;
        this._unUsedQueue = new Queue();
        this._sBox.onUserScrolled.add((curOffset) => {
            this.onValueChange();
        });
        this._sBox.onScrollEnd.add(() => {
            this.onValueChange();
        });
    }
    mInitCallback = new mw.Action2();
    /**调用InitData第一次初始化时的回调 */
    get InitCallback() {
        return this.mInitCallback;
    }
    mItemCallback = new mw.Action2();
    /**每个Item刷新时的回调 */
    get ItemCallback() {
        return this.mItemCallback;
    }
    setData(val) {
        this._dataCount = val.length;
        this._dataArray = val;
        this.updateTotalWidth();
        this._index = -1;
        this.resetSBoxPos();
        if (this._itemArr != null) {
            for (let i = this._itemArr.length; i > 0; i--) {
                let item = this._itemArr[i - 1];
                this._itemArr.splice(i - 1, 1);
                this._unUsedQueue.push(item);
                item.uiObject.visibility = (mw.SlateVisibility.Collapsed);
            }
            this.onValueChange();
        }
    }
    onValueChange() {
        if (this._itemArr == null || this._dataCount == 0)
            return;
        let index = this.getPosIndex();
        if (index < 0 && this._index > 0) {
            index = 0;
        }
        if (this._index != index && index > -1) {
            this._index = index;
            for (let i = this._itemArr.length; i > 0; i--) {
                let item = this._itemArr[i - 1];
                if (item["scorllIndex"] < index * this._maxPerLine || (item["scorllIndex"] >= (index + this._viewLine) * this._maxPerLine)) {
                    this._itemArr.splice(i - 1, 1);
                    this._unUsedQueue.push(item);
                    item.uiObject.visibility = (mw.SlateVisibility.Collapsed);
                }
            }
            for (let i = this._index * this._maxPerLine; i < (this._index + this._viewLine) * this._maxPerLine; i++) {
                if (i < 0)
                    continue;
                if (i > this._dataCount - 1)
                    continue;
                let isOk = false;
                for (let item of this._itemArr) {
                    if (item["scorllIndex"] == i)
                        isOk = true;
                }
                if (isOk)
                    continue;
                this.createItem(i);
            }
        }
    }
    /**
    * 根据索引号 获取当前item的位置
    * @param i   索引
    * @return 返回Pos
    */
    getPosition(i) {
        let xpos = (i % this._maxPerLine);
        let ypos = Math.floor(i / this._maxPerLine);
        switch (this._movement) {
            case mw.Orientation.OrientHorizontal:
                return new mw.Vector2((this._cellWidth + this._spacingX) * xpos + this._leftSpace, ((this._cellHeight + this._spacingY) * ypos) + this._topSpace);
            case mw.Orientation.OrientVertical:
                // return new mw.Vector2(this._cellWidth * xpos + (xpos != 0 ? this._spacingX * xpos : 0) + this._leftSpace, ((this._cellHeight + this._spacingY) * ypos) + this._topSpace);
                return new mw.Vector2((this._cellWidth + this._spacingX) * xpos + this._leftSpace, ((this._cellHeight + this._spacingY) * ypos) + this._topSpace);
        }
        return mw.Vector2.zero;
    }
    onDestroy() {
        this._itemArr = null;
        this._unUsedQueue = null;
    }
    getItemCount() {
        return this._maxPerLine * this._viewLine;
    }
    setItemIndex(item, index) {
        item["scorllIndex"] = index;
        item.uiObject.position = (this.getPosition(index));
    }
    createItem(i) {
        let itemBase;
        if (this._unUsedQueue.size() > 0) {
            itemBase = this._unUsedQueue.pop();
            itemBase.uiObject.visibility = (mw.SlateVisibility.Visible);
        }
        else {
            if (this._itemPrefab.Gain != null) {
                itemBase = this._itemPrefab.Gain();
            }
            else {
                itemBase = UIService.create(this._itemPrefab); // this._itemPrefab["creat"]();
            }
            (this._scrollRoot.addChild(itemBase.uiObject));
            itemBase.uiObject.size = (new mw.Vector2(this._cellWidth, this._cellHeight));
            this.mInitCallback.call(i, itemBase);
        }
        this.setItemIndex(itemBase, i);
        if (this._dataArray && itemBase["scorllIndex"] < this._dataArray.length) {
            // itemBase.setData(this._dataArray[itemBase["scorllIndex"]]);
            this.mItemCallback.call(i, itemBase);
        }
        this._itemArr.push(itemBase);
        return;
    }
    /**
    * 获取最上位置的索引
     * @return 返回Pos
    */
    getPosIndex() {
        let pos = this._scrollRoot.position;
        switch (this._movement) {
            case mw.Orientation.OrientHorizontal:
                {
                    return Math.floor(pos.x / -(this._cellWidth + this._spacingX));
                }
            case mw.Orientation.OrientVertical:
                {
                    let ret = pos.y / -(this._cellHeight + this._spacingY);
                    return Math.floor(ret);
                }
        }
        return 0;
    }
    // 这个方法的目的 就是根据总数量 行列 来计算content的真正宽度或者高度
    updateTotalWidth() {
        switch (this._movement) {
            case mw.Orientation.OrientHorizontal:
                let width = this._cellWidth * this._dataCount + this._spacingX * (this._dataCount - 1);
                let height = this._scrollRoot.size.y;
                this._scrollRoot.size = (new mw.Vector2(width, height));
                break;
            case mw.Orientation.OrientVertical:
                let lineCount = Math.ceil(this._dataCount / this._maxPerLine);
                this._scrollRoot.size = (new mw.Vector2(this._scrollRoot.size.x, this._cellHeight * lineCount + this._spacingY * (lineCount - 1) + this._topSpace));
                break;
        }
    }
    resetSBoxPos() {
        // 两句配合才能达到重置到顶部的效果
        this._scrollRoot.position = (new mw.Vector2(0, 0));
        this._sBox.scrollToStart();
        // this._sBox.ScrollToStart();
    }
    reset2BoxTop() {
        // 两句配合才能达到重置到顶部的效果
        this._scrollRoot.position = (new mw.Vector2(0, 0));
        this._sBox.scrollToStart();
    }
}

exports.FacadUtil = void 0;
(function (FacadUtil) {
    // export function getV2(cha: mw.Character | mw.Character): mw.HumanoidV2 {
    // 	let tool = cha.description.advance;
    // 	if (!tool) {
    // 		tool = cha.setAppearance(mw.HumanoidV2);
    // 	}
    // 	return (tool as mw.HumanoidV2);
    // }
    function checkDataValue(data, type, newValue) {
        let oldV = data.equipFacads[type] || 0;
        if (oldV >= 10000 || oldV < 0) {
            data.equipFacads[type] = newValue;
            console.error("setEquipedFacad222", type, newValue);
        }
    }
    function resetDataByDefalut(data, playerId) {
        playerId = -playerId;
        let cfg = getCfg(playerId);
        if (cfg) {
            checkDataValue(data, exports.EmFacadPart.BodyUpper, playerId);
            checkDataValue(data, exports.EmFacadPart.BodyLower, playerId);
            checkDataValue(data, exports.EmFacadPart.HairFront, playerId);
            checkDataValue(data, exports.EmFacadPart.HairBack, playerId);
            checkDataValue(data, exports.EmFacadPart.Head, playerId);
            checkDataValue(data, exports.EmFacadPart.Shoe, playerId);
            checkDataValue(data, exports.EmFacadPart.Gloves, playerId);
        }
        for (const key in data.allSuits) {
            if (Number(key) >= 10000 || Number(key) < 0) {
                delete data.allSuits[key];
                break;
            }
        }
        data.allSuits[playerId] = 1;
    }
    FacadUtil.resetDataByDefalut = resetDataByDefalut;
    function setPart(cha, type, value) {
        return new Promise(async (resolve) => {
            if (value == "") {
                return resolve(0);
            }
            else {
                //guid
                if (value.length < 10) {
                    setChaDescData(cha, type, value);
                    resolve(2);
                }
                else {
                    if (cha) {
                        cha.setDescription([value]);
                        return resolve(2);
                    }
                }
            }
        });
    }
    FacadUtil.setPart = setPart;
    function setPartData(data, id, type, value, clear) {
        if (value == "") {
            if (clear) {
                data.setEquipedFacad(type, 0);
            }
        }
        else if (value == "null") {
            data.setEquipedFacad(type, id);
        }
        else {
            data.setEquipedFacad(type, id);
        }
    }
    FacadUtil.setPartData = setPartData;
    function arr2Vec3(arr) {
        if (arr == null || arr.length != 3) {
            return null;
        }
        let vec = new mw.Vector(arr[0], arr[1], arr[2]);
        return vec;
    }
    FacadUtil.arr2Vec3 = arr2Vec3;
    /***
     * 穿戴一套
     */
    async function wearSuit(data, cfg) {
        if (cfg.mainType != 0) {
            //挂件
            data.setEquipedFacad(cfg.mainType, cfg.ID);
            // FacadUtil.syncPart(data);
        }
        else {
            forEachFacad(cfg, async (type, value) => {
                setPartData(data, cfg.ID, type, value, false);
            });
        }
    }
    FacadUtil.wearSuit = wearSuit;
    async function unwearSuit(data, cfg, defaultCfgId) {
        if (cfg.mainType != 0) {
            //挂件
            data.setEquipedFacad(cfg.mainType, 0);
        }
        else {
            let defaultCfg = FacadUtil.getCfg(defaultCfgId);
            for (const t of data.getEquipedFacadsArray()) {
                if (t.cfgId == cfg.ID) {
                    setPartData(data, defaultCfg.ID, t.type, FacadUtil.getSuitPartValue(t.type, defaultCfg), true);
                }
            }
        }
    }
    FacadUtil.unwearSuit = unwearSuit;
    // export function syncPart(data: FacadModuleDataBase) {
    // 	let changes: number[] = [];
    // 	//
    // 	data.getEquipedFacadsArray().forEach(element => {
    // 		let tmp = FacadUtil.getCfg(element.cfgId);
    // 		if (tmp.mainType != 0) {
    // 			changes.push(element.cfgId);
    // 		}
    // 	});
    // 	if (true) {
    // 		if (mw.SystemUtil.isServer()) {
    // 			data.facadScript.setfacadIds(changes);
    // 		}
    // 		else {
    // 			data.facadScript.setfacadIdsClient(changes);
    // 		}
    // 	}
    // }
    let cfgMap;
    // let toolKey: Map<EmFacadPart, string> = new Map([
    // 	[EmFacadPart.BodyLower, "lowerCloth"],
    // 	[EmFacadPart.BodyUpper, "upperCloth"],
    // 	[EmFacadPart.HairFront, "frontHair"],
    // 	[EmFacadPart.HairBack, "behindHair"],
    // 	[EmFacadPart.Gloves, "gloves"],
    // 	[EmFacadPart.Shoe, "shoe"],
    // 	[EmFacadPart.Head, "head"]
    // ]);
    function setChaDescData(cha, type, value) {
        value = value || "";
        switch (type) {
            case exports.EmFacadPart.BodyLower:
                cha.description.advance.clothing.lowerCloth.style = value;
                break;
            case exports.EmFacadPart.BodyUpper:
                cha.description.advance.clothing.upperCloth.style = value;
                break;
            case exports.EmFacadPart.HairFront:
                cha.description.advance.hair.frontHair.style = value;
                break;
            case exports.EmFacadPart.HairBack:
                cha.description.advance.hair.backHair.style = value;
                break;
            case exports.EmFacadPart.Gloves:
                cha.description.advance.clothing.gloves.style = value;
                break;
            case exports.EmFacadPart.Shoe:
                cha.description.advance.clothing.shoes.style = value;
                break;
            case exports.EmFacadPart.Head:
                cha.description.advance.headFeatures.head.style = value;
                break;
        }
    }
    FacadUtil.setChaDescData = setChaDescData;
    FacadUtil.Tag = "FacadState";
    function addCfg(cfgs) {
        cfgMap = new Map();
        cfgs.forEach(c => {
            cfgMap.set(c.ID, c);
        });
    }
    FacadUtil.addCfg = addCfg;
    function getCfg(id) {
        return cfgMap.get(id);
    }
    FacadUtil.getCfg = getCfg;
    function addDefalutCfg(playerId, partIds) {
        let cfg = {
            /**id*/
            ID: -playerId,
            /**主分类(0=外观 ，>=7挂件类)*/
            mainType: 0,
            /**分类(显示用标签)*/
            type: 0,
            /**名字*/
            name: "默认",
            /**简介*/
            desc: "默认",
            /**排序权重越大越靠前*/
            sortValue: 0,
            /**身体数据，捏脸必填，设置上半身的时候会设置*/
            body: "",
            /**上半身*/
            bodyupper: partIds[2].toString(),
            /**下半身*/
            bodylower: partIds[3].toString(),
            /**前发*/
            hairfront: partIds[6].toString(),
            /**后发*/
            hairlate: partIds[1].toString(),
            /**脸部*/
            head: partIds[0].toString(),
            /**手*/
            gloves: partIds[4].toString(),
            /**脚*/
            shoe: partIds[5].toString(),
            /**挂件*/
            effectGuid: null,
            /**材质*/
            matGuid: null,
            /**挂点*/
            socket: 0,
            /**相对位置*/
            posOffset: null,
            /**相对缩放*/
            scale: null,
            /**相对旋转*/
            rotate: null,
            /**装备图标*/
            icon: 0,
            /**价格图标*/
            priceIcon: 0,
            /**价格类型*/
            priceType: 0,
            /**价格*/
            price: 100
        };
        cfgMap.set(-playerId, cfg);
    }
    FacadUtil.addDefalutCfg = addDefalutCfg;
    function deleteDefaultCfg(playerId) {
        cfgMap.delete(playerId);
    }
    FacadUtil.deleteDefaultCfg = deleteDefaultCfg;
    function foreach(call) {
        cfgMap.forEach(cfg => {
            call(cfg);
        });
    }
    FacadUtil.foreach = foreach;
    function setState(cha, bLock) {
        if (bLock && cha[FacadUtil.Tag]) {
            console.log("typee11111");
        }
        cha[FacadUtil.Tag] = bLock;
    }
    FacadUtil.setState = setState;
    function forEachFacad(cfg, call) {
        if (cfg.bodylower) {
            call(exports.EmFacadPart.BodyLower, cfg.bodylower);
        }
        if (cfg.bodyupper) {
            call(exports.EmFacadPart.BodyUpper, cfg.bodyupper);
        }
        if (cfg.hairfront) {
            call(exports.EmFacadPart.HairFront, cfg.hairfront);
        }
        if (cfg.hairlate) {
            call(exports.EmFacadPart.HairBack, cfg.hairlate);
        }
        if (cfg.gloves) {
            call(exports.EmFacadPart.Gloves, cfg.gloves);
        }
        if (cfg.shoe) {
            call(exports.EmFacadPart.Shoe, cfg.shoe);
        }
        if (cfg.head) {
            call(exports.EmFacadPart.Head, cfg.head);
        }
    }
    FacadUtil.forEachFacad = forEachFacad;
    function getSuitPartValue(part, cfg) {
        if (cfg) {
            switch (part) {
                case exports.EmFacadPart.BodyLower:
                    return (cfg.bodylower);
                case exports.EmFacadPart.BodyUpper:
                    return (cfg.bodyupper);
                case exports.EmFacadPart.HairBack:
                    return (cfg.hairlate);
                case exports.EmFacadPart.HairFront:
                    return (cfg.hairfront);
                case exports.EmFacadPart.Shoe:
                    return (cfg.shoe);
                case exports.EmFacadPart.Gloves:
                    return (cfg.gloves);
                case exports.EmFacadPart.Head:
                    return (cfg.head);
            }
        }
        return "";
    }
    FacadUtil.getSuitPartValue = getSuitPartValue;
})(exports.FacadUtil || (exports.FacadUtil = {}));
class FacadModuleBaseC extends mwext.ModuleC {
    // private tmpUse: Map<EmFacadPart, number> = new Map();
    tmpData;
    facadHumand;
    // private lookObj: mw.GameObject;
    _camearAngleV = NaN;
    // private oldCameraData: any = {};
    defaultCamera;
    facadCamera;
    async onAwake() {
        if (!this.getHumanGuid()) {
            return;
        }
        this.facadHumand = await mw.GameObject.asyncFindGameObjectById(this.getHumanGuid());
        // await this.facadHumand.ready();
        // this.facadHumand.switchToFlying();
       // this.facadHumand.complexMovementEnabled = false;
        this.facadHumand.switchToFlying();
        this.facadHumand.switchToWalking();
        this.facadHumand.displayName = "";
    }
    onEnterScene(sceneType) {
        {
            mw.Player.asyncGetLocalPlayer().then(async (player) => {
                if (!this.getHumanGuid()) {
                    this.facadHumand = player.character;
                }
                else {
                    if (!this.facadHumand) {
                        this.facadHumand = await mw.GameObject.asyncFindGameObjectById(this.getHumanGuid());
                    }
                }

                console.log("这个ai角色",this.facadHumand)
                // // await this.facadHumand.ready();
                // // this.facadHumand.switchToFlying();
                // this.facadHumand.complexMovementEnabled = false;
                // this.facadHumand.switchToFlying();
                // this.facadHumand.switchToWalking();
                // this.facadHumand.displayName = "";
                // this.lookObj = await mw.GameObject.asyncFindGameObjectById(this.getLookObjGuid());
                this.footCube = mw.GameObject.spawn("Anchor");
                this.footCube.setCollision(mw.PropertyStatus.Off);
                this.facadHumand.attachToSlot(this.footCube, mw.HumanoidSlotType.LeftFoot);
                this.footCube.localTransform.scale = (mw.Vector.one.multiply(0.2));
                this.footCube.setVisibility(mw.PropertyStatus.Off);
                this.tmpData = new FacadModuleDataBase();
                this.tmpData.clone(this.data);
                this.tmpData.facadScript = await this.getFacadClass();
                this.tmpData.facadScript.gameObject = (this.facadHumand);
                this.tmpData.facadScript.completeAction.add((pid) => {
                });
                this.tmpData.facadScript.startAction.add((pid) => {
                });
                mw.AccountService.downloadData(this.facadHumand, async (bool) => {
                    if (bool) {
                        let pid = mw.Player.localPlayer.playerId;
                        let v2 = this.facadHumand.description.advance;
                        let arr = [
                            // Number(v2.head.getMesh()),
                            // Number(v2.behindHair.getMesh()),
                            // Number(v2.upperCloth.getMesh()),
                            // Number(v2.lowerCloth.getMesh()),
                            // Number(v2.gloves.getMesh()),
                            // Number(v2.shoe.getMesh()),
                            // Number(v2.frontHair.getMesh()),
                            Number(v2.headFeatures.head.style),
                            Number(v2.hair.backHair.style),
                            Number(v2.clothing.upperCloth.style),
                            Number(v2.clothing.lowerCloth.style),
                            Number(v2.clothing.gloves.style),
                            Number(v2.clothing.shoes.style),
                            Number(v2.hair.frontHair.style),
                        ];
                        console.log("下载资源完成", arr);
                        exports.FacadUtil.addDefalutCfg(pid, arr);
                        await this.server.net_AddPlayerDefaultCfg(arr);
                        exports.FacadUtil.resetDataByDefalut(this.data, pid);
                        this.tmpData.facadScript.setIDClient(this.facadHumand.gameObjectId, -1, arr);
                        this.onFacadReady();
                    }
                });
            });
        }
    }
    footCube;
    posImage;
    hasSuit(cfgId) {
        return this.data.hasSuit(cfgId);
    }
    isSuitInUse(cfgId) {
        return this.data.isSuitCfgInUse(cfgId);
    }
    isSuitInTmpUse(cfgId) {
        // for (const key of this.tmpUse.values()) {
        // 	if (cfgId == key) {
        // 		return true;
        // 	}
        // }
        // return false;
        return this.tmpData.isSuitCfgInUse(cfgId);
    }
    net_AddSuit(cfgId) {
        this.data.addSuit(cfgId);
        Event.dispatchToLocal("Facad_ItemChanges", cfgId);
    }
    net_UseSuit(cfgId) {
        let cfg = exports.FacadUtil.getCfg(cfgId);
        exports.FacadUtil.wearSuit(this.data, cfg);
        Event.dispatchToLocal("Facad_ItemChanges", cfgId);
    }
    net_UpdateUseFaced(arr) {
        arr.forEach(tmp => {
            this.data.setEquipedFacad(tmp.type, tmp.cfgId);
        });
    }
    reqBuySuit(cfgId) {
        this.server.net_BuySuit(cfgId);
    }
    getCameraData() {
        this.defaultCamera = Camera.currentCamera;
    }
    async setCarmeraOffset(img) {
        await TimeUtil.delaySecond(0.05);
        // this.facadCamera.parent = null;
        let win = mw.getViewportSize();
        let viewPort = mw.WindowUtil.getViewportSize();
        let pos1 = new Vector2(0, 0);
        let viewPos = new Vector2(0, 0);
        mw.localToViewport(img.tickSpaceGeometry, Vector2.zero, pos1, viewPos);
        viewPos.x *= win.x / viewPort.x;
        viewPos.y *= win.y / viewPort.y;
        //计算下来就是pos1的值
        let result = mw.InputUtil.convertScreenLocationToWorldSpace(viewPos.x, viewPos.y);
        let back = this.facadCamera.worldTransform.rotation.getForce();
        let angle = Vector.angle(result.worldDirection, back);
        setTimeout(() => {
            this._camearAngleV = Math.tan(angle * Math.PI / 180);
            let ty = this.getTargetArmLength() * this._camearAngleV;
            this.facadHumand.worldTransform.rotation = new mw.Rotation(0, 0, -angle + 180);
            // let loc = this.facadHumand.worldTransform.position;
            // loc.z = result.worldPosition.z;
            // this.facadHumand.worldTransform.position = loc;
            let relativeTrans = this.facadCamera.springArm.localTransform;
            relativeTrans.position = new Vector(0, ty, 0);
        }, 1);
    }
    openFacad(cls) {
        // console.log("摄像机参数1", JSON.stringify(mw.Player.localPlayer.character.cameraSystem.getCurrentSettings()))
        this.getCameraData();
        UIService.show(cls);
        this.posImage = UIService.getUI(cls).getUICfg().mPosImg;
        if (!this.facadCamera) {
            this.facadCamera = GameObject.spawn("Camera");
            // this.facadHumand.attachToSlot(this.facadCamera, mw.HumanoidSlotType.Root);
            // this.facadCamera.worldTransform = this.lookObj.worldTransform;
            // this.lookObj.worldTransform.position = this.facadHumand.worldTransform.position.clone().add(new mw.Vector(0, 0, -10));
            // this.facadCamera.springArm.length = this.getTargetArmLength();
            // this.facadCamera.localTransform.rotation = new mw.Rotation(0, -180, 0);
            // this.facadCamera.springArm.localTransform = this.facadCamera.springArm.localTransform;
            this.facadCamera.positionLagSpeed = 0;
            this.facadCamera.positionLagEnabled = false;
            this.facadCamera.rotationLagSpeed = 0;
            this.facadCamera.rotationLagEnabled = false;
            this.facadCamera.springArm.collisionEnabled = false;
            // this.facadCamera.
        }
        this.facadCamera.springArm.localTransform.position = Vector.zero;
        this.facadCamera.worldTransform.position = this.facadHumand.worldTransform.position.clone().add(new mw.Vector(-this.getTargetArmLength(), 0, -10));
        // GameObject.findGameObjectById("36891A84").worldTransform = this.facadCamera.worldTransform;
        Camera.switch(this.facadCamera);
        setTimeout(() => {
            this.setCarmeraOffset(this.posImage);
            this.resetFacad();
        }, 10);
        //cs..springArm.localTransform = this.getTargetOffset();
    }
    resetFacad() {
        this.tmpData.clone(this.data);
        let tmp = this.data.getEquipedFacadsArray();
        let tmp2 = new Map();
        if (this.facadHumand) {
            // if (this.initRotation) {
            // 	this.facadHumand.worldTransform.rotation = this.initRotation;
            // }
            this.tmpData.facadScript.clearPartClient();
            tmp.forEach((tmp) => {
                // let cfg = FacadUtil.getCfg(tmp.cfgId);
                // FacadUtil.setPart(null, this.facadHumand, tmp.cfgId, tmp.type, FacadUtil.getSuitPartValue(tmp.type, cfg));
                tmp2.set(tmp.cfgId, 1);
            });
            // FacadUtil.updateFacadByDataArr(this.tmpData, this.facadHumand, tmp)
            this.tmpData.facadScript.setfacadIdsClient(this.tmpData.getEquipedFacadsStr());
        }
        Event.dispatchToLocal("FacadSelectChange", tmp2);
    }
    compareData(tmpArr, oldArr) {
        let ret = [];
        let tmpMap = new Map();
        tmpArr.forEach(t => {
            tmpMap.set(t.type, t);
        });
        let oldMap = new Map();
        oldArr.forEach(t => {
            oldMap.set(t.type, t);
            let newV = tmpMap.get(t.type)?.cfgId || 0;
            //清除和改变
            if (t.cfgId != newV) {
                ret.push({ type: t.type, cfgId: newV });
            }
        });
        //处理新增的
        tmpArr.forEach(t => {
            if (!oldMap.has(t.type)) {
                ret.push(t);
            }
        });
        return ret;
    }
    async trySaveFaced() {
        let needBuy = [];
        let tmpArr = this.tmpData.getEquipedFacadsArray();
        tmpArr.forEach((val) => {
            if (val.cfgId != 0 && !this.hasSuit(val.cfgId)) {
                needBuy.push(val.cfgId);
            }
            // else {
            // 	let old = this.data.getEquipedFacadByType(val.type);
            // 	if (old != val.cfgId) {
            // 		change.push({ cfgId: val.cfgId, type: val.type })
            // 	}
            // }
        });
        if (needBuy.length > 0) {
            this.onNoticeNeedBuy(needBuy);
            return;
        }
        let change = this.compareData(tmpArr, this.data.getEquipedFacadsArray());
        if (change.length > 0) {
            let ret = await this.server.net_ChangeFacadSuitState(change);
            if (ret) {
                change.forEach(tmp => {
                    this.data.setEquipedFacad(tmp.type, tmp.cfgId);
                });
                this.onEquipCall(change);
                this.closeFacad(false);
            }
        }
        else {
            this.closeFacad(false);
        }
    }
    onEquipCall(change) {
    }
    addRoatation(dir) {
        // let cha = mw.GameObject.findGameObjectById("1CB679DC403B250F2D64B49518B8773D");
        // let loc = cha.location;
        // loc.y -= 10;
        // cha.location = loc; return
        if (this.facadHumand) {
            this.facadHumand.worldTransform.rotation = this.facadHumand.worldTransform.rotation.add(new mw.Rotation(0, 0, this.getRotationSpeed() * dir));
        }
    }
    closeFacad(revert = true) {
        Camera.switch(this.defaultCamera);
        this.onCameraComplete();
        if (revert) {
            this.resetFacad();
        }
    }
    /**
     * 请求穿戴/脱下装备
     * @param cfgId
     */
    reqChangeFacadSuitState(cfgId) {
        let cfg = exports.FacadUtil.getCfg(cfgId);
        let isUse = this.isSuitInTmpUse(cfgId);
        if (isUse) {
            //临时脱下
            exports.FacadUtil.unwearSuit(this.tmpData, cfg, -mw.Player.localPlayer.playerId);
        }
        else {
            //穿戴
            exports.FacadUtil.wearSuit(this.tmpData, cfg);
        }
        this.tmpData.facadScript.setfacadIdsClient(this.tmpData.getEquipedFacadsStr());
        let tmp = new Map();
        this.tmpData.getEquipedFacadsArray().forEach((val, key) => {
            tmp.set(val.cfgId, 1);
        });
        Event.dispatchToLocal("FacadSelectChange", tmp);
    }
} //end
class FacadModuleBaseS extends mwext.ModuleS {
    onPlayerJoined(player) {
    }
    onPlayerLeft(player) {
        let data = this.getPlayerData(player);
        if (data.facadScript) {
            data.facadScript.destroy();
            data.facadScript = null;
        }
        exports.FacadUtil.deleteDefaultCfg(player.playerId);
    }
    useFacadSuit(player, cfgId, data) {
        let cfg = exports.FacadUtil.getCfg(cfgId);
        exports.FacadUtil.wearSuit(data, cfg);
        data.save(false);
        this.getClient(player).net_UseSuit(cfgId);
        // this.callClientFun(player, this.client.net_UseSuit(cfgId));
    }
    setPlayerFacadOnLogin(player, defaultPartData) {
        console.log("玩家登录");
        let data = this.getPlayerData(player);
        let pid = player.playerId;
        if (data.facadScript == null) {
            this.getFacadClass().then(sc => {
                if (mw.Player.getPlayer(pid) == null) {
                    sc.destroy();
                    return;
                }
                exports.FacadUtil.resetDataByDefalut(data, pid);
                data.facadScript = sc;
                data.facadScript.gameObject = (player.character);
                data.facadScript.cha = player.character;
                // await mw.TimeUtil.delaySecond(0.1);
                data.facadScript.setID(player.character.gameObjectId, player.playerId, defaultPartData);
                let arr = data.getEquipedFacadsArray();
                //创建默认
                if (arr.length == 0) {
                    let defaultCfg = exports.FacadUtil.getCfg(player.playerId);
                    if (defaultCfg) {
                        this.net_AddSuit(defaultCfg.ID, player);
                        this.useFacadSuit(player, defaultCfg.ID, data);
                    }
                    let parts = this.getAutoEquipPartIds(player);
                    if (parts) {
                        parts.forEach(id => {
                            let cfg = exports.FacadUtil.getCfg(id);
                            if (cfg) {
                                this.net_AddSuit(cfg.ID, player);
                                this.useFacadSuit(player, cfg.ID, data);
                            }
                        });
                    }
                }
                data.facadScript.setfacadIds(data.getEquipedFacadsStr());
            });
        }
    }
    net_AddPlayerDefaultCfg(partIds) {
        exports.FacadUtil.addDefalutCfg(this.currentPlayerId, partIds);
        this.setPlayerFacadOnLogin(this.currentPlayer, partIds);
        return true;
    }
    net_AddSuit(cfgId, player) {
        let data = this.getPlayerData(player);
        if (data.hasSuit(cfgId)) {
            return;
        }
        data.addSuit(cfgId);
        data.save(false);
        this.getClient(player).net_AddSuit(cfgId);
        // this.callClientFun(player, this.client.net_AddSuit(cfgId));
    }
    net_BuySuit(cfgId,player) {
        let ret = this.checkBuyConditon(player, exports.FacadUtil.getCfg(cfgId));
        if (ret) {
            this.net_AddSuit(cfgId, player);
        }
    }
    hasSuit(player, cfgId) {
        let data = this.getPlayerData(player);
        return data.hasSuit(cfgId);
    }
    net_ChangeFacadSuitState(changes) {
        let data = this.getPlayerData(this.currentPlayer);
        let allHas = true;
        changes.forEach(change => {
            if (change.cfgId != 0) {
                allHas = allHas && data.hasSuit(change.cfgId);
            }
        });
        if (!allHas) {
            return false;
        }
        // changes.forEach(tmp => {
        // 	let cfg = FacadUtil.getCfg(tmp.cfgId);
        // 	if (cfg.mainType == 0) {
        // 		FacadUtil.updatePlayerFacad(player.character.v2Tools, tmp.type, cfg);
        // 	}
        // 	else {
        // 		//挂件
        // 	}
        // 	data.setEquipedFacad(tmp.type, tmp.cfgId);
        // })
        changes.forEach(tmp => {
            data.setEquipedFacad(tmp.type, tmp.cfgId);
        });
        data.facadScript.setfacadIds(data.getEquipedFacadsStr());
        // FacadUtil.updateFacadByDataArr(data, player.character, changes);
        data.save(false);
        return true;
    }
} //end
class FacadUICfg {
    scrollBox;
    scrollContent;
    renderItemSize;
    horAndVerSpace;
    btnLeft;
    btnRight;
    btnSave;
    btnRevert;
    mTouch;
    mPosImg;
}
class FacadUIBase extends mwext.BasePanel {
    moduleCls;
    renderCls;
    mScroll;
    curDataIds;
    firstBtn;
    tabMap = new Map();
    renderMap = new Map();
    curType = -1;
    cfg;
    constructor(viewClass, moduleCls, renderCls) {
        // super(viewClass as any);
        super(viewClass);
        this.moduleCls = moduleCls;
        this.renderCls = renderCls;
        // this.holdBackTouch=(true);
        this.layer = mw.UILayerBottom;
    }
    onStart() {
        // super.onStart();
        // this.view.uiObject
        //全部重刷
        Event.addLocalListener("Facad_ItemAddOrDelete", (cfgId) => {
            let needUpdate = this.moduleCls.isSameType(cfgId, this.curType);
            if (needUpdate) {
                this.showItems(this.moduleCls.getItemIdsByType(this.curType));
            }
        });
        Event.addLocalListener("Facad_ItemChanges", (cfgId) => {
            let needUpdate = this.moduleCls.isSameType(cfgId, this.curType);
            if (needUpdate) {
                //this.showItems(ModuleService.getModule(moduleCls).getItemsByType(this.curType));
                //更新对应格子,先记录一下
                for (const [renderItem, id] of this.renderMap) {
                    if (id == cfgId) {
                        renderItem.setData(renderItem["setData_data"]);
                        break;
                    }
                }
            }
        });
        this.cfg = new FacadUICfg();
        let cfg = this.cfg;
        this.initUICfg(this.cfg);
        let num_row = Math.floor(cfg.scrollContent.size.x / (cfg.renderItemSize.x + cfg.horAndVerSpace.x));
        let num_col = Math.ceil(cfg.scrollContent.size.y / (cfg.renderItemSize.y + cfg.horAndVerSpace.y)) + 1;
        this.mScroll = new UIMultiScroller(cfg.scrollBox, cfg.scrollContent, this.renderCls, num_row, 0, 0, cfg.renderItemSize.x, cfg.renderItemSize.y, num_col, cfg.horAndVerSpace.x, cfg.horAndVerSpace.y);
        this.mScroll.ItemCallback.add(this.onRefeshItem, this);
        this.mScroll.InitCallback.add(this.onInitItem, this);
        // this.mScroll.Init(mw.Orientation.Orient_Vertical);
        cfg.btnLeft.onClicked.add(() => {
            this.moduleCls.addRoatation(-1);
        });
        cfg.btnRight.onClicked.add(() => {
            this.moduleCls.addRoatation(1);
        });
        cfg.btnRevert.onClicked.add(() => {
            this.moduleCls.resetFacad();
        });
        cfg.btnSave.onClicked.add(() => {
            this.moduleCls.trySaveFaced();
        });
        this.moveVec = [];
        mw.TimeUtil.delayExecute(() => {
            this.movePos = cfg.mTouch.position.multiply(1);
        }, 3);
        this.canUpdate = true;
    }
    onInitItem(index, renderItem) {
        // let btn = renderItem.clickObj;
        // if (btn) {
        // 	btn.onClicked.Add(() => {
        // 		let data = renderItem["setData_data"];
        // 		if (data.id == this.curItemId) {
        // 			return;
        // 		}
        // 		this.showItemDetal(data);
        // 	})
        // }
    }
    onRefeshItem(index, renderItem) {
        let cfg = this.curDataIds[index];
        // let data = this.dataHelper.getItemByItemId(id)
        renderItem.setData(cfg);
        renderItem["setData_data"] = cfg;
        // renderItem.setSelect(id == this.curItemId);
        this.renderMap.set(renderItem, cfg.ID);
    }
    showItems(itemIds) {
        this.curDataIds = itemIds;
        // if (itemIds.length > 0) {
        // 	this.showItemDetal(this.dataHelper.getItemByItemId(itemIds[0]));
        // }
        // else {
        // 	this.showItemDetal(null);
        // }
        this.mScroll.setData(this.curDataIds);
        //this.mScroll.ScrollToStart();
    }
    addTabs(btn, type, isFirst) {
        btn.onClicked.add(() => {
            let type = this.tabMap.get(btn);
            if (this.curType == type) {
                return;
            }
            this.showItemsByTypes(btn);
        });
        if (isFirst) {
            this.firstBtn = btn;
        }
        this.tabMap.set(btn, type);
    }
    showItemsByTypes(btn) {
        let type = this.tabMap.get(btn);
        this.curType = type;
        let items = (this.moduleCls).getItemIdsByType(type);
        this.showItems(items);
        this.tabMap.forEach((ttype, btn) => {
            this.onTabBtnStateChangeCallBack(btn, ttype == this.curType);
        });
    }
    onShow(...params) {
        if (this.firstBtn) {
            this.showItemsByTypes(this.firstBtn);
        }
        TouchScript.instance.addScreenListener(this.cfg.mTouch, this.onMoveTouchEvent, false);
    }
    onHide() {
        TouchScript.instance.removeScreenListener(this.cfg.mTouch);
    }
    onTouchStarted(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchStarted(inGemory, inPointerEvent);
    }
    onTouchMoved(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchMoved(inGemory, inPointerEvent);
    }
    onTouchEnded(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchEnded(inGemory, inPointerEvent);
    }
    moveId = -1;
    moveVec;
    dir = 0;
    movePos;
    onMoveTouchEvent = (widget, event, x, y, inPointerEvent) => {
        // console.log(event, x, y, inPointerEvent.pointerIndex);
        if (this.movePos) {
            if (event == exports.Enums.TouchEvent.DOWN) {
                // mw.instance.hidePanel(UIGuide);
                if (this.moveId < 0) {
                    this.moveId = inPointerEvent.pointerIndex;
                    this.moveVec[0] = x;
                    this.moveVec[1] = y;
                }
            }
            else if (event == exports.Enums.TouchEvent.MOVE) {
                if (this.moveId >= 0) {
                    let xoffset = x - this.moveVec[0];
                    let yoffset = y - this.moveVec[1];
                    this.dir = 0;
                    if (Math.abs(xoffset) > Math.abs(yoffset)) {
                        // this.moduleCls.addRoatation(xoffset > 0 ? -1 : 1);
                        this.dir = Math.floor(xoffset);
                    }
                    this.moveVec[0] = x;
                    this.moveVec[1] = y;
                    // console.log("sss", x, y, this.moveVec[0], this.moveVec[1]);
                    // let dir = new mw.Vector(xoffset, yoffset, 0)
                    // if (xoffset * xoffset + yoffset * yoffset > 3600) {
                    // 	// if (!this.dir) {
                    // 	// 	Event.dispatchToLocal(C2CEvent.PlayerMove);
                    // 	// }
                    // 	this.dir = new mw.Vector(-yoffset, xoffset, 0).getNormalized();
                    // }
                    // if (dir.size > this.moveBgSize.x / 2) {
                    // 	dir = dir.getNormalized().multiply(200);
                    // }
                }
            }
            else if (event == exports.Enums.TouchEvent.UP) {
                if (this.moveId >= 0) {
                    this.moveId = -1;
                    this.dir = 0;
                }
            }
        }
    };
    onUpdate(dt) {
        if (this.dir != 0) {
            this.moduleCls.addRoatation(this.dir * dt);
            this.dir = 0;
        }
    }
    // protected showItemDetal(item: T): void {
    // 	this.curItemId = item ? item.id : null;
    // 	this.onShowItemDetal(item);
    // 	for (const [renderItem, id] of this.renderMap) {
    // 		if (id == this.curItemId) {
    // 			renderItem.setSelect(true);
    // 		}
    // 		else {
    // 			renderItem.setSelect(false);
    // 		}
    // 	}
    // }
    // protected getSelectData(): T {
    // 	return this.dataHelper.getItemByItemId(this.curItemId);
    // }
    getUICfg() {
        return this.cfg;
    }
}
mwext.BasePanel.prototype["onAwake"] = function () {
    this.rootCanvas.addChild(this.view.uiObject);
    this.viewSize = this.view.uiObject.size;
    this.viewPosition = this.view.uiObject.position;
    this.viewConstraints = this.view.uiObject.constraints;
    this.view.uiObject.position = mw.Vector2.zero;
    this.view.uiObject.constraints = new mw.UIConstraintAnchors(mw.UIConstraintHorizontal.LeftRight, mw.UIConstraintVertical.TopBottom);
};
mwext.BasePanel.prototype["onAdded"] = function () {
    this.uiObject.size = this.viewSize;
    this.uiObject.position = this.viewPosition;
    this.uiObject.constraints = this.viewConstraints;
};
/**
 * 渲染单个道具的格子
 */
class FacadItemRender extends mwext.BasePanel {
    constructor(view, size) {
        super(view);
        // this.view = UIService.create(view);
    }
    /**
     * 设置选中状态
     * @param bool 是否选中
     */
    setSelect(bool) {
    }
    /**
     * 点击按钮，用来监听点击
     */
    get clickObj() {
        return null;
    }
    // get uiObject(): mw.Widget {
    // 	return (this).uiObject;
    // }
    data;
    /**
     * 渲染数据回调
     * @param data 道具对象
     */
    setData(data) {
        this.data = data;
        this.view.mImgIcon.imageGuid = (data.icon.toString());
        this.view.mItemName.text = (data.name);
        this.view.mTextDesc.text = (data.desc);
        this.view.mImgGold.imageGuid = (data.priceIcon.toString());
        this.view.mPrice.text = (data.price.toString());
        let module = this.getModule();
        let isHave = module.hasSuit(data.ID);
        this.view.mBuyCon.visibility = (!isHave ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
        this.updateUseState();
    }
    updateUseState() {
        let module = this.getModule();
        let isUse = module.isSuitInTmpUse(this.data.ID);
        this.view.mSelect.visibility = (isUse ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    onStart() {
        // super.onStart();
        // this.rootCanvas.addChild(this.view.uiObject)
        // this.view.uiObject.slot.size = this.rootCanvas.size;
        // // this.view.uiObject.slot.constraints = new mw.UIConstraintAnchors(mw.UIConstraintHorizontal.LeftRight, mw.UIConstraintVertical.TopBottom)
        // this.view.mbtnUse.touchMethod = (mw.ButtonTouchMethod.PreciseTap);
        this.view.mbtnUse.onClicked.add(() => {
            let module = this.getModule();
            let isHave = module.hasSuit(this.data.ID);
            if (!isHave) {
                module.reqBuySuit(this.data.ID);
            }
        });
        this.view.mBtnSelect.onClicked.add(() => {
            let module = this.getModule();
            module.reqChangeFacadSuitState(this.data.ID);
        });
        Event.addLocalListener("FacadSelectChange", (map) => {
            let isUse = map.has(this.data.ID);
            this.view.mSelect.visibility = (isUse ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
        });
    }
}

exports.IDData = class IDData {
    guid = "";
    playerId = 0;
    defaultPartData = null;
};
exports.IDData = __decorate([
    Serializable
], exports.IDData);
class FacadScript extends mw.Script {
    idData = null;
    facadIds = null;
    setfacadIds(data) {
        this.facadIds = data;
    }
    setfacadIdsClient(data) {
        this.facadIds = data;
        Event.dispatchToLocal("testU", this.facadIds);
        if (!this.isListenServer()) {
            this.onFacadDataChange();
        }
    }
    isSelf() {
        let p = mw.Player.localPlayer;
        return p && this.idData && this.idData.playerId == p.playerId;
    }
    isListenServer() {
        return mw.SystemUtil.isServer() && mw.SystemUtil.isClient();
    }
    setIDClient(guid, playerId, defaultParts) {
        // return;
        this.isUI = true;
        let t = new exports.IDData();
        t.defaultPartData = defaultParts;
        t.guid = guid;
        t.playerId = playerId;
        this.idData = t;
        if (!this.isListenServer()) {
            this.onIDDataChange();
        }
    }
    setID(guid, playerId, defaultPartData) {
        let t = new exports.IDData();
        t.defaultPartData = defaultPartData;
        t.guid = guid;
        t.playerId = playerId;
        this.idData = t;
    }
    // Client===================================
    cha;
    intervalId;
    effectOwner;
    isUI;
    completeAction = new mw.Action1();
    startAction = new mw.Action1();
    syncAllComplete() {
        this.completeAction.call(this.idData.playerId);
    }
    syncStart() {
        this.startAction.call(this.idData.playerId);
    }
    onIDDataChange() {
        this.onIDDataInit();
    }
    async onIDDataInit() {
        if (this.intervalId) {
            return;
        }
        if (this.idData && this.idData.guid) {
            if (!this.cha) {
                await this.asyncFindGo();
            }
            exports.FacadUtil.addDefalutCfg(this.idData.playerId, this.idData.defaultPartData);
            if (this.cha) {
                this.effectOwner = new EffectOwner(this.cha);
                this.onRoleInitOk();
            }
        }
    }
    onRoleInitOk() {
        this.onFacadDataChange();
    }
    async asyncFindGo() {
        // console.log("guid查找：" + this.guid)
        return new Promise((resolve, re) => {
            if (this.intervalId) {
                clearInterval(this.intervalId);
            }
            this.intervalId = setInterval(async () => {
                this.cha = mw.GameObject.findGameObjectById(this.idData.guid);
                if (this.cha) {
                    clearInterval(this.intervalId);
                    this.intervalId = null;
                    await this.cha.asyncReady();
                    resolve();
                }
            }, 200);
        });
    }
    onDestroy() {
        if (this.idData) {
            exports.FacadUtil.deleteDefaultCfg(this.idData.playerId);
        }
        if (this.effectOwner) {
            this.effectOwner.destory();
            this.effectOwner = null;
        }
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
    }
    oldbuffs = new Map();
    oldCache = new Map();
    oldTask;
    hasFacadState(type, val) {
        // return false;
        let item = this.oldCache.get(type);
        return item && item.value == val && item.state == 1;
    }
    setFacadState(type, val, state) {
        this.oldCache.set(type, {
            state: state,
            value: val
        });
    }
    async onFacadDataChange() {
        if (!this.effectOwner || null == this.facadIds) {
            return;
        }
        if (this.oldTask) {
            this.oldTask.destory();
            this.oldTask = null;
        }
        let arr = this.facadIds.split("|");
        //为了其他逻辑兼容
        if (this.facadIds == "") {
            arr = [];
        }
        //
        let meshArr = [];
        // let guidArr: string[] = [];
        let tmp = new Map();
        let bodyNotChange = true;
        //简单换装
        let hasMesh;
        arr.forEach(element => {
            let tmpArr = element.split("_");
            let type = Number(tmpArr[0]);
            let cfgId = Number(tmpArr[1]);
            let cfg = exports.FacadUtil.getCfg(cfgId) || this.getCfg(cfgId);
            if (cfg.mainType == 0) {
                let v = exports.FacadUtil.getSuitPartValue(type, cfg);
                if (v) {
                    if (!(this.hasFacadState(type, v) && bodyNotChange)) {
                        hasMesh = hasMesh || (v.length != 32);
                        meshArr.push({ type: type, value: v });
                        if (type == exports.EmFacadPart.BodyUpper && cfg.body) {
                            if (!this.hasFacadState(exports.EmFacadPart.Body, cfg.body)) {
                                { //UI 上的模型需要设置
                                    meshArr.unshift({ type: exports.EmFacadPart.Body, value: cfg.body });
                                }
                                bodyNotChange = false;
                            }
                        }
                    }
                }
            }
            else {
                tmp.set(type, cfgId);
                this.effectOwner.playEffectByConfig(cfg, true);
                let oldArr = this.oldbuffs.get(type);
                if (oldArr == cfgId) {
                    this.oldbuffs.delete(type);
                    return;
                }
            }
        });
        if (this.isUI || this.isSelf()) {
            if (meshArr.length) {
                this.oldTask = new FacadTask(this);
                this.oldTask.load(this.cha, meshArr, this.isUI);
            }
            else {
                this.syncAllComplete();
            }
        }
        this.oldbuffs.forEach((effId, type) => {
            if (type != 0) {
                this.effectOwner.destoryEffect(effId);
            }
        });
        this.oldbuffs = tmp;
    }
    clearPartClient() {
        this.facadIds = "";
        this.effectOwner?.destory();
        if (this.oldTask) {
            this.oldTask.destory();
            this.oldTask = null;
        }
        // this.oldbuffs.clear();
    }
}
__decorate([
    mw.Property({ replicated: true, onChanged: "onIDDataChange" })
], FacadScript.prototype, "idData", void 0);
__decorate([
    mw.Property({ replicated: true, onChanged: "onFacadDataChange" })
], FacadScript.prototype, "facadIds", void 0);
__decorate([
    RemoteFunction(mw.Server)
], FacadScript.prototype, "setfacadIds", null);
__decorate([
    RemoteFunction(mw.Server)
], FacadScript.prototype, "setID", null);
class FacadTask {
    sc;
    constructor(sc) {
        this.sc = sc;
    }
    setMeshArr;
    cha;
    isUI;
    isDestoty;
    // private isDiy: boolean;
    onLoadComplete() {
        this.startLoad();
    }
    async load(cha, setMeshDatas, isUI) {
        this.setMeshArr = setMeshDatas;
        this.isUI = isUI;
        this.cha = cha;
        // await this.cha.styleReady;
        // this.getV2(this.cha).clearAppearance();
        this.sc.syncStart();
        this.startLoad();
    }
    async startLoad() {
        if (this.isDestoty) {
            //已经被销毁了
            return;
        }
        if (!this.setMeshArr) {
            return;
        }
        if (this.setMeshArr && this.setMeshArr.length > 0) {
            let item = this.setMeshArr.pop();
            this.sc.setFacadState(item.type, item.value, 0);
            exports.FacadUtil.setPart(this.cha, item.type, item.value).then((t) => {
                // this.isDiy = this.isDiy || (t == 2);
                if (!this.isDestoty) {
                    this.sc.setFacadState(item.type, item.value, 1);
                    this.onLoadComplete();
                }
            });
        }
        else {
            console.log("全部完成");
            if (!this.isUI && this.sc.isSelf()) {
                // FacadUtil.getV2(this.cha).appearanceSync();
                this.cha.syncDescription();
            }
            setTimeout(() => {
                this.sc.syncAllComplete();
            }, 100);
        }
    }
    destory() {
        this.setMeshArr = null;
        this.isDestoty = true;
    }
}
class EffectObj {
    go;
    cfgId;
}
class EffectOwner {
    cha;
    constructor(cha) {
        this.cha = cha;
    }
    get size() {
        return this.goMap.size;
    }
    hasSame(cfgId) {
        for (const iterator of this.goMap.values()) {
            if (iterator.cfgId == cfgId) {
                return true;
            }
        }
        return false;
    }
    goMap = new Map();
    /**
     * 播放一个特效
     * @param configId 配置ID
     * @param checkSame 重复无效
     * @returns void
     */
    playEffectByConfig(qEffCfg, checkSame) {
        if (checkSame && this.hasSame(qEffCfg.ID)) {
            return;
        }
        if (qEffCfg) {
            let go = DyObjUtil.Ins.createGo(qEffCfg.effectGuid.toString());
            if (qEffCfg.matGuid != "" && go instanceof mw.Model && go.SetMaterial != null) {
                go.setMaterial(qEffCfg.matGuid.toString());
            }
            if (go) {
                go.setCollision(mw.PropertyStatus.Off);
            }
            // go.setCollision(mw.PropertyStatus.Off);
            let data = new EffectObj();
            data.go = go;
            data.cfgId = qEffCfg.ID;
            this.goMap.set(go, data);
            if (qEffCfg.socket >= 0) {
                {
                    // this.cha.attachGameObjectToCharacter(go, qEffCfg.socket)
                    // let a = mw.HumanoidSlotType[qEffCfg.socket];
                    // console.log(a)
                    // FacadUtil.getV2(this.cha).attachToSlot(go, qEffCfg.socket)
                    this.cha.attachToSlot(go, qEffCfg.socket);
                }
                go.localTransform.position = (qEffCfg.posOffset != null && qEffCfg.posOffset.length > 0 ? exports.FacadUtil.arr2Vec3(qEffCfg.posOffset) : mw.Vector.zero);
            }
            else {
                go.worldTransform.position = qEffCfg.posOffset != null && qEffCfg.posOffset.length > 0 ? exports.FacadUtil.arr2Vec3(qEffCfg.posOffset).add(this.cha.worldTransform.position) : this.cha.worldTransform.position;
            }
            if (qEffCfg.rotate && qEffCfg.rotate.length == 3) {
                go.localTransform.rotation = (new mw.Rotation(exports.FacadUtil.arr2Vec3(qEffCfg.rotate)));
            }
            else {
                go.localTransform.rotation = (new mw.Rotation(mw.Vector.zero));
            }
            if (qEffCfg.scale && qEffCfg.scale.length == 3) {
                go.worldTransform.scale = exports.FacadUtil.arr2Vec3(qEffCfg.scale);
            }
            else {
                go.worldTransform.scale = mw.Vector.one;
            }
        }
    }
    destory() {
        this.goMap.forEach((data) => {
            DyObjUtil.Ins.destoryGo(data.go);
        });
        this.goMap.clear();
    }
    destoryEffect(cfgId) {
        let obj = null;
        for (const iterator of this.goMap.values()) {
            if (iterator.cfgId == cfgId) {
                obj = iterator;
                break;
            }
        }
        if (obj) {
            this.goMap.delete(obj.go);
            DyObjUtil.Ins.destoryGo(obj.go);
        }
    }
}
class DyObjUtil {
    static Ins = new DyObjUtil();
    _map = new Map();
    _delayIdMap = new Map();
    setIds(ids) {
        let arr = ids.split(",");
        arr.forEach(element => {
            this._map.set(element, true);
        });
    }
    createGo(guid) {
        if (this._map.has(guid) == false) ;
        //let go = SpawnManager.wornSpawn(guid, mw.SystemUtil.isServer());
        let go = mwext.GameObjPool.spawn(guid);
        if (go instanceof mw.Effect) {
            let delayId = mw.TimeUtil.delayExecute(() => {
                go.play();
                this._delayIdMap.delete(go.gameObjectId);
            }, 10);
            this._delayIdMap.set(go.gameObjectId, delayId);
        }
        if (go == null) {
            console.log("无效的guid", guid);
        }
        return go;
    }
    destoryGo(go) {
        if (!go) {
            return null;
        }
        if (this._delayIdMap.has(go.gameObjectId)) {
            let delayId = this._delayIdMap.get(go.gameObjectId);
            mw.TimeUtil.clearDelayExecute(delayId);
            this._delayIdMap.delete(go.gameObjectId);
        }
        mwext.GameObjPool.despawn(go);
        //go.destroy();
        return null;
    }
}

exports.CountMap = CountMap;
exports.DyObjUtil = DyObjUtil;
exports.EffectObj = EffectObj;
exports.EffectOwner = EffectOwner;
exports.FacadItemRender = FacadItemRender;
exports.FacadModuleBaseC = FacadModuleBaseC;
exports.FacadModuleBaseS = FacadModuleBaseS;
exports.FacadModuleDataBase = FacadModuleDataBase;
exports.FacadScript = FacadScript;
exports.FacadTask = FacadTask;
exports.FacadUIBase = FacadUIBase;
exports.FacadUICfg = FacadUICfg;
exports.Queue = Queue;
exports.TouchScript = TouchScript;
exports.UIMultiScroller = UIMultiScroller;
//# sourceMappingURL=index.js.map
