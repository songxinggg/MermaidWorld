declare module "module_facad" {
    export interface IRoleAvatarCfg {
        /**id*/
        ID: number;
        /**主分类(0=外观 ，>=7挂件类)*/
        mainType: number;
        /**分类(显示用标签)*/
        type: number;
        /**名字*/
        name: string;
        /**简介*/
        desc: string;
        /**上半身*/
        bodyupper: string;
        /**下半身*/
        bodylower: string;
        /**前发*/
        hairfront: string;
        /**后发*/
        hairlate: string;
        /**脸部*/
        head: string;
        /**手*/
        gloves: string;
        /**脚*/
        shoe: string;
        /**挂件*/
        effectGuid: string;
        /**材质*/
        matGuid: string;
        /**挂点*/
        socket: number;
        /**相对位置*/
        posOffset: Array<number>;
        /**相对缩放*/
        scale: Array<number>;
        /**相对旋转*/
        rotate: Array<number>;
        /**装备图标*/
        icon: number;
        /**价格图标*/
        priceIcon: number;
        /**价格类型*/
        priceType: number;
        /**价格*/
        price: number;
    }
}

declare module "module_facad" {
    export class IDData {
        guid: string;
        playerId: number;
        defaultPartData: number[];
    }
    export abstract class FacadScript extends mw.Script {
        idData: IDData;
        facadIds: string;
        setfacadIds(data: string): void;
        setfacadIdsClient(data: string): void;
        isSelf(): boolean;
        private isListenServer;
        setIDClient(guid: string, playerId: number, defaultParts: number[]): void;
        setID(guid: string, playerId: number, defaultPartData: number[]): void;
        cha: mw.Character | mw.Character;
        protected intervalId: any;
        effectOwner: EffectOwner;
        private isUI;
        completeAction: mw.Action1<number>;
        startAction: mw.Action1<number>;
        syncAllComplete(): void;
        syncStart(): void;
        protected onIDDataChange(): void;
        protected onIDDataInit(): Promise<void>;
        protected onRoleInitOk(): void;
        protected asyncFindGo(): Promise<void>;
        protected onDestroy(): void;
        private oldbuffs;
        private oldCache;
        private oldTask;
        hasFacadState(type: EmFacadPart, val: string): boolean;
        setFacadState(type: EmFacadPart, val: string, state: number): void;
        onFacadDataChange(): Promise<void>;
        clearPartClient(): void;
        abstract getCfg(id: number): IRoleAvatarCfg;
    }
    export class FacadTask {
        private sc;
        constructor(sc: FacadScript);
        private setMeshArr;
        private cha;
        private isUI;
        private isDestoty;
        private onLoadComplete;
        load(cha: mw.Character | mw.Character, setMeshDatas: FacadUtil.FacadData[], isUI: boolean): Promise<void>;
        private startLoad;
        destory(): void;
    }
    export class EffectObj {
        go: mw.GameObject;
        cfgId: number;
    }
    export class EffectOwner {
        private cha;
        constructor(cha: mw.Character | mw.Character);
        get size(): number;
        private hasSame;
        private goMap;
        /**
         * 播放一个特效
         * @param configId 配置ID
         * @param checkSame 重复无效
         * @returns void
         */
        playEffectByConfig(qEffCfg: IRoleAvatarCfg, checkSame: boolean): void;
        destory(): void;
        destoryEffect(cfgId: number): void;
    }
    export class DyObjUtil {
        static Ins: DyObjUtil;
        private _map;
        private _delayIdMap;
        setIds(ids: string): void;
        createGo<T extends mw.GameObject>(guid: string): T;
        destoryGo(go: mw.GameObject): any;
    }
}

declare module "module_facad" {
    export enum EmFacadPart {
        Body = -1,
        /**上衣 */
        BodyUpper = 0,
        /**下衣 */
        BodyLower = 1,
        /**前发 */
        HairFront = 2,
        /**后发 */
        HairBack = 3,
        /**脸，头 */
        Head = 4,
        /**手套 */
        Gloves = 5,
        /**鞋子 */
        Shoe = 6,
        PartStart = 7
    }
    export class CountMap<K, V> extends Map {
        addCount(key: number | string, num: number): void;
        hasCount(key: number | string): boolean;
        decCount(key: number | string, num: number): void;
    }
    export type UseFacad = {
        type: EmFacadPart;
        cfgId: number;
    };
    export class FacadModuleDataBase extends Subdata {
        equipFacads: {
            [key: number]: number;
        };
        allSuits: {
            [key: number]: number;
        };
        facadScript: FacadScript;
        private usedMap;
        protected initDefaultData(): void;
        get dataName(): string;
        clone(data: FacadModuleDataBase): void;
        private cloneObj;
        getEquipedFacadsArray(): UseFacad[];
        getEquipedFacadsStr(): string;
        protected onDataInit(): void;
        /**
         * 获取某个部位的挂件信息
         * @param facadType 挂件部位
         * @returns 找到的道具
        */
        getEquipedFacadByType(facadType: EmFacadPart): number;
        /**
         * 设置某个部位的挂件信息
         * @param facadType 挂件枚举
         * @param facad 挂件信息
         */
        setEquipedFacad(facadType: EmFacadPart, facadCfgId: number): void;
        addSuit(cfgId: number): void;
        hasSuit(cfgId: number): boolean;
        isSuitCfgInUse(cfgId: number): boolean;
        forEachAllSuit(call: (id: number) => void): void;
    }
}

declare module "module_facad" {
    export namespace Enums {
        enum TouchEvent {
            DOWN = 0,
            MOVE = 1,
            UP = 2
        }
    }
    export class TouchScript {
        constructor();
        onStart(): void;
        private static _ins;
        static get instance(): TouchScript;
        /**屏幕事件 */
        private screenListeners;
        private captureMap;
        addScreenListener(widget: mw.Widget, callback: (widget: mw.Widget, type: Enums.TouchEvent, x: number, y: number, inPointerEvent: mw.PointerEvent) => void, adjuestCenter: boolean): void;
        removeScreenListener(widget: mw.Widget): void;
        onTouchStarted(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
        onTouchMoved(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
        onTouchEnded(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
    }
}

declare module "module_facad" {
    export class Queue<T> {
        private elemrnts;
        private _size;
        constructor(capacity?: number);
        push(o: T): boolean;
        pop(): T;
        size(): number;
        isempty(): boolean;
        clear(): void;
        show(num: number): T;
        showsize(): number | undefined;
        getAll(): T[];
    }
}

declare module "module_facad" {
    /**
     * 无限滚动列表_vae
     */
    export interface IItemRender {
        setData(data: any): void;
        get uiObject(): mw.Widget;
        get clickObj(): mw.StaleButton;
        setSelect(bool: boolean): void;
    }
    export class UIMultiScroller {
        private _index;
        private _dataCount;
        private _sBox;
        private _scrollRoot;
        private _movement;
        private _itemArr;
        private _unUsedQueue;
        private _maxPerLine;
        private _leftSpace;
        private _topSpace;
        private _cellWidth;
        private _cellHeight;
        private _spacingX;
        private _spacingY;
        private _viewLine;
        private _itemPrefab;
        private _dataArray;
        /**
        * 循环列表构造函数
        * @param sbox       ScrollBox对象ui的引用
        * @param sr         ScrollBox下的节点的引用
        * @param prefab     ScrollBoxItem预制体
        * @param maxPerLine 每行显示的数量
        * @param leftSpace  左边界间距
        * @param topSpace   上边界间距
        * @param cellWidth  ScrollBox下子节点的宽
        * @param cellHeight ScrollBox下子节点的高
        * @param viewCount  ScrollBox的默认加载行数
        * @param spacingX   ScrollBox的行间距X
        * @param spacingY   ScrollBox的行间距Y
        */
        constructor(sbox: mw.ScrollBox, sr: mw.Canvas, preafab: mw.TypeName<IItemRender>, maxPerLine: number, leftSpace?: number, topSpace?: number, cellWidth?: number, cellHeight?: number, viewCount?: number, spacingX?: number, spacingY?: number);
        private mInitCallback;
        /**调用InitData第一次初始化时的回调 */
        get InitCallback(): mw.Action2<number, IItemRender>;
        private mItemCallback;
        /**每个Item刷新时的回调 */
        get ItemCallback(): mw.Action2<number, IItemRender>;
        setData(val: any[]): void;
        onValueChange(): void;
        /**
        * 根据索引号 获取当前item的位置
        * @param i   索引
        * @return 返回Pos
        */
        getPosition(i: number): mw.Vector2;
        onDestroy(): void;
        getItemCount(): number;
        private setItemIndex;
        private createItem;
        /**
        * 获取最上位置的索引
         * @return 返回Pos
        */
        private getPosIndex;
        private updateTotalWidth;
        private resetSBoxPos;
        reset2BoxTop(): void;
    }
}

declare module "module_facad" {
    export namespace FacadUtil {
        type FacadData = {
            type: EmFacadPart;
            value: string;
        };
        function resetDataByDefalut(data: FacadModuleDataBase, playerId: number): void;
        function setPart(cha: mw.Character | mw.Character, type: EmFacadPart, value: string): Promise<Number>;
        function setPartData(data: FacadModuleDataBase, id: number, type: EmFacadPart, value: string, clear: boolean): void;
        function arr2Vec3(arr: number[]): mw.Vector;
        /***
         * 穿戴一套
         */
        function wearSuit(data: FacadModuleDataBase, cfg: IRoleAvatarCfg): Promise<void>;
        function unwearSuit(data: FacadModuleDataBase, cfg: IRoleAvatarCfg, defaultCfgId: number): Promise<void>;
        function setChaDescData(cha: mw.Character, type: EmFacadPart, value: string): void;
        const Tag = "FacadState";
        function addCfg(cfgs: IRoleAvatarCfg[]): void;
        function getCfg(id: number): IRoleAvatarCfg;
        function addDefalutCfg(playerId: number, partIds: number[]): void;
        function deleteDefaultCfg(playerId: number): void;
        function foreach(call: (cfg: IRoleAvatarCfg) => void): void;
        function setState(cha: mw.Character | mw.Character, bLock: boolean): void;
        function forEachFacad(cfg: IRoleAvatarCfg, call: (type: EmFacadPart, val: string) => void): void;
        function getSuitPartValue(part: EmFacadPart, cfg: IRoleAvatarCfg): string;
    }
    export abstract class FacadModuleBaseC<S extends FacadModuleBaseS<any>> extends mwext.ModuleC<S, FacadModuleDataBase> {
        private tmpData;
        protected facadHumand: mw.Character;
        private _camearAngleV;
        private defaultCamera;
        private facadCamera;
        onAwake(): Promise<void>;
        onEnterScene(sceneType: number): void;
        private footCube;
        private posImage;
        hasSuit(cfgId: number): boolean;
        isSuitInUse(cfgId: number): boolean;
        isSuitInTmpUse(cfgId: number): boolean;
        net_AddSuit(cfgId: number): void;
        net_UseSuit(cfgId: number): void;
        net_UpdateUseFaced(arr: UseFacad[]): void;
        reqBuySuit(cfgId: number): void;
        private getCameraData;
        private setCarmeraOffset;
        openFacad(cls: mw.TypeName<FacadUIBase<mw.UIScript>>): void;
        resetFacad(): void;
        private compareData;
        trySaveFaced(): Promise<void>;
        protected onEquipCall(change: UseFacad[]): void;
        addRoatation(dir: number): void;
        closeFacad(revert?: boolean): void;
        /**
         * 请求穿戴/脱下装备
         * @param cfgId
         */
        reqChangeFacadSuitState(cfgId: number): void;
        /**
         * 获取某一类的装扮，内部自由可自由筛选
         * @param type
         */
        abstract getItemIdsByType(type: number): IRoleAvatarCfg[];
        /**
         * 判断某个配置是否属于某一类，可自定义
         * @param cfgId
         * @param type
         */
        abstract isSameType(cfgId: number, type: number): boolean;
        /**
         * 场景换装的C端假人GUID
         */
        abstract getHumanGuid(): string;
        /**
         * 保存需要购买的回调
         * @param cfgIds
         */
        abstract onNoticeNeedBuy(cfgIds: number[]): any;
        abstract getTargetArmLength(): number;
        abstract getRotationSpeed(): number;
        abstract getFacadClass(): Promise<FacadScript>;
        abstract onFacadReady(): void;
        /**
         * 返回ls模式下，ai的姿态和动画，因为ai会下掉，所以切飞行模式
         */
        abstract onCameraComplete(): void;
    }
    export abstract class FacadModuleBaseS<C extends FacadModuleBaseC<any>> extends mwext.ModuleS<C, FacadModuleDataBase> {
        abstract getFacadClass(): Promise<FacadScript>;
        /**
         * 配置 出生自动装备的挂件,mainType>=7,同一类支持一个
         * @param player
         */
        abstract getAutoEquipPartIds(player: mw.Player): number[];
        /**
         * 购买逻辑,返回true 才能购买
         * @param player
         * @param cfg
         */
        abstract checkBuyConditon(player: mw.Player, cfg: IRoleAvatarCfg): boolean;
        onPlayerJoined(player: mw.Player): void;
        onPlayerLeft(player: mw.Player): void;
        protected useFacadSuit(player: mw.Player, cfgId: number, data: FacadModuleDataBase): void;
        protected setPlayerFacadOnLogin(player: mw.Player, defaultPartData: number[]): void;
        net_AddPlayerDefaultCfg(partIds: number[]): boolean;
        net_AddSuit(cfgId: number, player: mw.Player): void;
        net_BuySuit(cfgId: number,player: mw.Player): void;
        hasSuit(player: mw.Player, cfgId: number): boolean;
        net_ChangeFacadSuitState(changes: UseFacad[]): boolean;
    }
    export class FacadUICfg {
        scrollBox: mw.ScrollBox;
        scrollContent: mw.Canvas;
        renderItemSize: mw.Vector2;
        horAndVerSpace: mw.Vector2;
        btnLeft: mw.StaleButton;
        btnRight: mw.StaleButton;
        btnSave: mw.StaleButton;
        btnRevert: mw.StaleButton;
        mTouch: mw.Image;
        mPosImg: mw.Image;
    }
    export abstract class FacadUIBase<U extends mw.UIScript> extends mwext.BasePanel<U> {
        private moduleCls;
        private renderCls;
        private mScroll;
        private curDataIds;
        private firstBtn;
        private tabMap;
        private renderMap;
        private curType;
        private cfg;
        constructor(viewClass: mw.TypeName<U>, moduleCls: FacadModuleBaseC<any>, renderCls: mw.TypeName<IItemRender>);
        protected onStart(): void;
        private onInitItem;
        private onRefeshItem;
        protected showItems(itemIds: IRoleAvatarCfg[]): void;
        protected addTabs(btn: mw.StaleButton, type: number, isFirst: boolean): void;
        private showItemsByTypes;
        protected onShow(...params: any[]): void;
        protected onHide(): void;
        onTouchStarted(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
        onTouchMoved(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
        onTouchEnded(inGemory: mw.Geometry, inPointerEvent: mw.PointerEvent): mw.EventReply;
        private moveId;
        private moveVec;
        private dir;
        private movePos;
        private onMoveTouchEvent;
        protected onUpdate(dt: number): void;
        getUICfg(): FacadUICfg;
        protected abstract initUICfg(cfg: FacadUICfg): void;
        protected abstract onTabBtnStateChangeCallBack(btn: mw.StaleButton, isSelect: boolean): any;
    }
    export interface IFacadItemRender extends mw.UIScript {
        mBtnSelect: mw.StaleButton;
        mImgBG: mw.Image;
        mImgIcon: mw.Image;
        mSelect: mw.Image;
        mBuyCon: mw.Canvas;
        mPrice: mw.TextBlock;
        mImgGold: mw.Image;
        mbtnUse: mw.StaleButton;
    }
    /**
     * 渲染单个道具的格子
     */
    export abstract class FacadItemRender<T extends IFacadItemRender> extends mwext.BasePanel<T> implements IItemRender {
        abstract getModule(): FacadModuleBaseC<any>;
        constructor(view: mw.TypeName<T>, size: mw.Vector2);
        /**
         * 设置选中状态
         * @param bool 是否选中
         */
        setSelect(bool: boolean): void;
        /**
         * 点击按钮，用来监听点击
         */
        get clickObj(): mw.StaleButton;
        protected data: IRoleAvatarCfg;
        /**
         * 渲染数据回调
         * @param data 道具对象
         */
        setData(data: IRoleAvatarCfg): void;
        protected updateUseState(): void;
        protected onStart(): void;
    }
}
