declare module "module_guide" {
    export class GuideContent {
        /**
         * 引导线Guid
         */
        static GuideArrowGuid: string;
        /**
         * 引导线材质Guid
         */
        static GuideArrowMartialGuid: string;
        /**
         * 目的地特效Guid
         */
        static GuideWorldTargetEffectGuid: string;
        /**
         * 引导线材质缩放：-1：反向，1：正向
         */
        static GuideMatrialScale: number;
        /**
         * 新手引导UI刷新时间
         */
        static ConstRefrashUITime: number;
        static GuideArrowMatrerialUpdate: (mat: mw.MaterialInstance[], go: mw.GameObject) => void;
    }
}

declare module "module_guide" {
    /** 新手引导 数据 操作类 */
    export class GuideDataHelper extends Subdata {
        onGuideChangeAction: mw.Action;
        complateGuide: number[];
        /**
         * 已经完成的引导
         */
        complateGuideList: number[];
        /**
         * 当前引导
         */
        curGuide: number;
        get dataName(): string;
        protected onDataInit(): void;
        /**
         * 初始化引导
         */
        protected initDefaultData(): void;
        /**
         * 重置所有引导存档
         */
        resetAllGuide(): void;
        /**
         * 重置引导存档
         * @param guideId
         */
        resetGuideById(guideId: number): boolean;
        /**
         * 完成引导
         * @param guideId 引导id
         */
        complateGuideHandle(guideId: number): void;
        /**
         * 引导是否完成
         * @param guideId 引导id
         * @returns
         */
        guideIsComplate(guideId: number): boolean;
        /**
         * 获取当前引导
         */
        getCurGuide(): number;
        /**
         * 设置当前引导阶段
         * @param val
         */
        setCurGuide(val: number): void;
    }
}

declare module "module_guide" {
    /**
     * 新手引导服务器模块
     */
    export class GuideModuleS extends mwext.ModuleS<GuideModuleC, GuideDataHelper> {
        /**
         * 设置当前执行的引导
         * @param guideId
         */
        net_SetCurrentRunGuide(guideId: number): void;
        /**
         * 重置所有引导
         */
        net_ResetAllGuide(): void;
        /**
         * 重置指定引导
         * @param guideId
         * @returns
         */
        net_ResetGuideAtGuideId(guideId: number): boolean;
        /**
         * 完成引导
         * @param guideId
         */
        net_ComplateGuide(guideId: number): void;
        /**
         * 引导是否完成
         * @param guideId
         */
        guideIsComplate(guideId: number, playerId: number): boolean;
    }
}

declare module "module_guide" {
    /**
     * 新手引导客户端模块
     */
    export class GuideModuleC extends mwext.ModuleC<GuideModuleS, GuideDataHelper> {
        /** 引导线缩放 */
        arrowScale: mw.Vector;
        /**
         * 预设引导信息列表
         */
        private guideInfoList;
        /**
         * 是否初始化
         */
        private isInit;
        /**
         * 当前引导Id
         */
        private curGuideIdVal;
        /**
         * 当前正在运行的引导
         */
        private runningGuide;
        /**
         * 阶段完成广播
         */
        guideComplateAction: mw.Action1<number>;
        /**
         * 覆盖角色GameObject
         */
        private _reSetCharGo;
        /**
         * 覆盖到达目标点距离判断 默认50 小于50则到达
         */
        private _reSetToTargetPosDistance;
        /**
         * 引导起始点z偏移
         */
        private _arrowStartPosOffsetZ;
        /**
         * 引导线起始方向偏移
         */
        private _guideArrowDirOffse;
        /**
         * 引导线Y缩放
         */
        private _guideArrowScaleY;
        /**
         * 引导线间隔
         */
        private _guideArrowIntervalDis;
        /**
         * 引导线地标信息
         */
        private _guideArrowPointerGuid;
        /**
         * 引导线地标缩放信息
         */
        private _guideArrowPointerScale;
        private _guideArrowPointerIsEffect;
        private _guideArrowPointerShowCount;
        private _guideArrowPointerUpdateInterval;
        private _guideArrowMatrialInit;
        /**
         * 进入场景
         * @param sceneType
         */
        onEnterScene(sceneType: number): void;
        /**
         * 获取引导线地标模式刷新频率
         * @returns
         */
        getGuideArrowPointerUpdateInterval(): number;
        /**
         * 引导线地标模式刷新频率
         * @param updateInterval 更新间隔(毫秒)
         */
        setGuideArrowPointerUpdateInterval(updateInterval: number): void;
        /**
         * 获取引导线地标是否粒子效果
         * @returns
         */
        getGuideArrowPointerIsEffect(): boolean;
        /**
         * 获取引导线地标guid
         * @returns
         */
        getGuideArrowPointerGuid(): string;
        /**
         * 获取引导线地标缩放信息
         * @returns
         */
        getGuideArrowPointerScale(): Vector;
        /**
         * 获取引导线最多显示的地标数量
         * @returns
         */
        getGuideArrorShowMaxPointer(): number;
        /**
         * 设置引导线地标信息
         * @param guid 引导线地标对象Guid，默认 29391
         * @param scale 缩放，默认 (1, 1, 1)
         * @param isEffect 是否特效，默认 否
         * @param showPointerCount 最大显示地标数量，默认 10
         * @param matrialUpdate 材质更新函数， 不传不会覆盖默认方法。如果传 boolean 则表示是否反向
         */
        setGuideArrowPointerInfo(guid: string, scale: Vector, isEffect: boolean, showPointerCount: number, matrialUpdate?: boolean | ((matrial: mw.MaterialInstance[], arrowGo: mw.GameObject) => void)): void;
        /**
         * 获取引导线地标生成间隔距离
         * @returns
         */
        getGuideArrowIntervalDis(): number;
        /**
         * 设置引导线地标生成间隔距离
         * @param intervalDis 间隔距离
         */
        setGuideArrowIntervalDis(intervalDis: number): void;
        /**
         * 设置引导线Y缩放
         * @param scaleY 引导线Y缩放
         */
        setGuideArrowScaleY(scaleY: number): void;
        /**
         * 获取引导线Y缩放
         * @returns
         */
        getGuideArrowScaleY(): number;
        /**
         * 设置引导线起始方向 偏移
         * @param distance 偏移距离
         */
        setGuideArrowDirOffset(distance: number): void;
        /**
         * 获取引导线起始方向 偏移
         */
        getGuideArrowDirOffsetDis(): number;
        /**
         * 设置引导线起始坐标 z偏移
         * @param offsetZ z偏移
         */
        setGuideArrowStartPosOffsetZ(offsetZ: number): void;
        /**
         * 获取引导线起始坐标 z偏移
         * @returns
         */
        getGuideArrowStartPosOffsetZ(): number;
        /**
         * 设置引导线 & 目标点特效guid
         * @param arrowGuid 引导线guid "0"则关闭
         * @param arrowMartialGuid 引导线材质guid "0"则关闭
         * @param targetPointEff 目标点guid "0"则关闭
         */
        setGuideArrowGuid(arrowGuid: string, arrowMartialGuid: string, targetPointEff: string): Promise<void>;
        /**
         * 重置引导存档
         */
        resetAllGuideDB(): Promise<void>;
        /**
         * 重置指定的引导
         * @param guideId 引导id
         * @returns
         */
        resetGuideById(guideId: number): Promise<boolean>;
        /**
         * 强制完成一个引导
         * @param guideId 引导id
         * @returns
         */
        forceComplateGuide(guideId: number): Promise<boolean>;
        /**
         * 获取最后一次执行引导时的id
         */
        getLastGuideId(): number;
        /**
         * 获取当前引导id
         * @deprecated 获取当前引导Id - 最新使用 getCurGuideId
         * @returns 返回引导id
         */
        getCurStageVal(): number;
        /**
         * 获取当前引导id
         * @returns 返回引导id
         */
        getCurGuideId(): number;
        /**
         * 到达目标点距离判断 默认50 小于50则到达
         * @param dis 目标点判定距离
         */
        reSetToTargetPosDistance(dis: number): void;
        /**
         * 获取到达目标点距离判断 默认50 小于50则到达
         * @returns
         */
        getToTargetPosDistance(): number;
        /**
         * 设置引导主角对象
         * @param go 主角GameObject对象
         */
        reSetCharGo(go: mw.GameObject): void;
        /**
         * 获取引导主角对象
         * @returns
         */
        getCharGo(): Promise<mw.GameObject>;
        /**
         * 初始化引导模块
         */
        private initGuide;
        /**
         * 移除引导
         * @param guideId
         */
        removeGuideId(guideId: number): void;
        /**
         * 添加引导
         * @param guideId 引导id - 不要重复
         * @return 引导信息
         */
        addGuideStageHandle(guideId: number): GuideInfo;
        /**
         * 触发引导
         * @param guideId 阶段id
         */
        triggerGuide(guideId: number): boolean;
        /**
         * Tick
         * @param dt
         */
        onUpdate(dt: number): void;
    }
}

declare module "module_guide" {
    /**
     * AUTO GENERATE BY UI EDITOR.
     * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
     * AUTHOR: 幸好时光与你同在
     * UI: UI/guideModule/GuideModuleUI.ui
     * TIME: 2022.10.25-09.35.32
     */
    export class GuideModuleUI_Generate extends mw.UIScript {
        mLeftMask: mw.StaleButton;
        mTopMask: mw.StaleButton;
        mButtomMask: mw.StaleButton;
        mRightMask: mw.StaleButton;
        mBtn: mw.StaleButton;
        mBtnHand: mw.Image;
        mTextHand: mw.TextBlock;
        protected onAwake(): void;
    }
}

declare module "module_guide" {
    /**
     * 新手引导UI
     */
    export class GuideModuleView extends GuideModuleUI_Generate {
        /**
         * 接收空间坐标
         */
        private _outPixelPos;
        /**
         * 用于接收视口坐标
         */
        private _outViewPos;
        /**
         * 当前引导绑定Target
         */
        private _bindTarget;
        /**
         * 按钮触发后的通知
         */
        private _btnClickToGuide;
        /**
         * 按钮触发后的事件传递
         */
        private _btnClickToTarget;
        /**
         * 引导箭头
         */
        private _guideArrow;
        /**
         * 目标点粒子特效
         */
        private _targetPosEff;
        /**
         * 到达目标点后的回调
         */
        private _toTargetPosCallback;
        /**
         * 目标点
         */
        private _targetPos;
        /**
         * 上一次的位置
         */
        private _lastPos;
        private _cachePointerGo;
        private _drawType;
        private _lastUpdateTime;
        private showPointers;
        /**
         * 模块初始化
         */
        onStart(): void;
        /**
         * 隐藏所有的组件
         */
        hideAllItem(): void;
        protected onShow(...params: any[]): void;
        /**
         * mask显隐
         * @param isShow
         */
        showMask(isShow: boolean): void;
        /**
         * 引导button点击后的回调
         */
        private buttonClick;
        /**
         * 设置引导到目标点
         * @param targetPos 目标点
         * @param callback 回调
         */
        setGuideArrowTargetPos(targetPos: mw.Vector, callback: () => boolean, drawType: number, bUpdateArrow: boolean): Promise<void>;
        /**
         * 锁定一个对象
         * @param target
         */
        lockMWUIWidget(target: mw.Widget, callback: () => void, tips?: string, isShowBtn?: boolean): void;
    }
}

declare module "module_guide" {
    /**
     * 引导信息
     */
    enum GuideState {
        /**
         * 拉取任务
         * */
        Pull = 0,
        /**
         * 等待完成UI
         */
        WaitUI = 1,
        /**
         * 等待到达世界坐标
         */
        WaitToPos = 2,
        /**
         * 等待完成自定义条件
         */
        ConditionRes = 3,
        /**
         * 执行自定义函数
         */
        RunFunc = 4,
        /**
         * 完成
         */
        Complate = 5
    }
    /**
     * 引导任务阶段
     */
    export class GuideTaskStage {
        /**
         * 任务类型
         */
        type: GuideState;
        /**
         * UI关联组件
         */
        uiWidget: mw.Widget;
        /**
         * 默认刷新dt
         */
        refrashDt: number;
        /**
         * 当前刷新UI的dt
         */
        curReFrashDt: number;
        /**
         * 需要引导到达的位置
         */
        toWorldPos: mw.Vector;
        /**
         * UI完成需要检测的条件
         */
        uiCheckCondition: () => boolean;
        /**
         * 完成需要检测的条件
         */
        checkCondition: Array<() => boolean>;
        /**
         * 引导UI时的提示语言
         */
        tips: string;
        /**
         * 寻路线段渲染方式
         * 0 为line 1为point
         */
        drawType: number;
        /**
         * 需要执行的自定义函数
         */
        runFuncs: Array<() => void>;
        copy(): GuideTaskStage;
        /**
         * 创建引导任务阶段
         * @param type 类型
         * @param condition 条件
         */
        static newGuideTaskStage(type: GuideState, condition: mw.Widget | mw.Vector | Array<() => boolean>, runFuncs?: Array<() => void>, uiConditionRes?: () => boolean): GuideTaskStage;
    }
    /**
     * 引导信息
     */
    export class GuideInfo {
        /**
         * 引导阶段
         */
        guideStage: number;
        /**
         * 引导列表
         */
        private taskStage;
        /**
         * 源引导列表
         */
        private srcStage;
        /**
         * 当前引导状态
         */
        private curState;
        /**
         * 引导完成后的通知
         */
        private complateNotify;
        /**
         * 每100毫秒刷新下UI
         */
        private refrashUITime;
        constructor(complateNotify: mw.Action1<number>);
        /**
         * 关联引导UI - 过滤按钮 - 自定义通过条件
         * @param widget
         * @param condition
         * @returns
         */
        addBindUIByCondition(widget: mw.Widget, condition: () => boolean): GuideInfo;
        /**
         * 关联引导UI - 过滤按钮 - 自定义通过条件 - 带提示
         * @param widget
         * @param condition
         * @returns
         */
        addBindUIAndTipsByCondition(widget: mw.Widget, tips: string, condition: () => boolean): GuideInfo;
        /**
         * 关联引导UI - 按顺序压入
         * @param widget
         * @returns
         */
        addBindUI(...widgets: mw.Widget[]): GuideInfo;
        /**
         * 关联引导UI 可以带Tips
         * @param widget
         * @param tips
         * @returns
         */
        addBindUIAndTips(widget: mw.Widget, tips: string): GuideInfo;
        /**
         * 关联引导UI - 按顺序压入 - 跟随UI刷新
         * @param widget
         * @returns
         */
        addBindUIAlawaysRefrash(...widgets: mw.Widget[]): GuideInfo;
        /**
         * 关联世界坐标 - 按顺序压入
         * @param poslist
         * @returns
         */
        addBindWorldPos(...poslist: mw.Vector[]): GuideInfo;
        /**
         * 关联世界坐标 - 自定义通过条件 - 按顺序压入
         * @param poslist
         * @param callback
         * @returns
         */
        addBindWorldPosByCondition(poslist: mw.Vector, callback: () => boolean): GuideInfo;
        /**
         * 关联世界坐标 - 按顺序压入 - 寻路渲染方式
         * @param poslist 坐标列表
         * @returns
         */
        addBindWorldPos_Pointer(...poslist: mw.Vector[]): GuideInfo;
        /**
         * 关联世界坐标 - 自定义通过条件 - 按顺序压入 - 寻路渲染方式
         * @param poslist 坐标
         * @param callback 自定义通过条件
         * @returns
         */
        addBindWorldPosByCondition_Pointer(poslist: mw.Vector, callback: () => boolean): GuideInfo;
        /**
         * 添加一个引导完成条件 - 按顺序压入
         * @param condition
         * @returns
         */
        addCondition(...condition: (() => boolean)[]): GuideInfo;
        /**
         * 添加一个自定义执行函数
         * @param func
         */
        addRunFunc(...funcs: (() => void)[]): GuideInfo;
        /**
         * 重置所有引导阶段
         */
        resetAllStage(): void;
        /**
         * 获取当前引导任务
         */
        getCurTask(): GuideTaskStage;
        /**
         * 执行处理
         */
        handle(dt: number): void;
        /**
         * 拉取任务
         */
        private pullTask;
        /**
         * 检测并且完成引导
         */
        checkCondition(): boolean;
        /**
         * UI任务触发完成后的回调
         */
        private onUITaskCallback;
        /**
         * 引导到目标地点后的回调
         */
        private onWorldToPosTaskCallback;
        /**
         * 开始UI引导
         * @param widget 要引导点击的目标UI对象或区域
         */
        private beginUITask;
        /**
         * 开始到目标点引导
         * @param toPos 目标点
         */
        private beginToWorldPosTask;
    }
}
